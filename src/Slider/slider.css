@import "../proto/base.css";

:root
{
    --horizontalSliderHeight:   32px;
    --verticalSliderHeight:     300px;

    --trackSize:                2px;
    --trackBorderWidth:         1px;

    --handleSize:               16px;

    --tickSize:                 4px;

    --labelMargin:              10px;
    --stepLabelContainerHeight: 16px; /*matches line height of labels*/
}


.default
{
    .inputContainer
    {
        position:   absolute;
        left:       -9999999px;
    }


    /* Track + handles */

    .handle,
    .track,
    {
        box-sizing: border-box;
    }

    .handle,
    .trackFill
    {
        position:   absolute;
        z-index:    1;
    }

    .trackContainer
    {
        display:    flex;
    }

    .track
    {
        position:           relative;

        width:              var( --trackSize );
        border-radius:      var( --trackSize );

        background:         var( --PC-GREY--L90 );

        user-select:        none;
        cursor:             pointer;

        &:hover
        {
            .handle
            {
                border-color: var( --PC-BLUE );
            }
        }
    }

    .trackFill
    {
        border-radius:      calc( var( --trackSize ) - ( 2 * var( --trackBorderWidth ) ) );
        background:         var( --PC-BLUE );
    }

    .handle
    {
        width:              var( --handleSize );
        height:             var( --handleSize );

        border-radius:      50%;
        border:             var( --trackBorderWidth ) solid var( --PC-GREY--L70 );
        background-color:   var( --PC-WHITE );

        cursor:             grab;

        &:active
        {
            cursor:         grabbing;
        }
    }

    .handleFocus
    {
        box-shadow:         0 0 2pt 1pt var( --PC-BLUE );
    }

    .handleLabel
    {
        display:            none;
    }


    /* Ticks */

    .ticksContainer
    {
        width:              100%;
        height:             100%;
        position:           relative;
    }

    .tick
    {
        position:           absolute;
        transform:          translateX(-50%) translateY(-50%);
        z-index:            2;

        font-size:          0;

        background-color:   var( --PC-WHITE );

        width:              var( --tickSize );
        height:             var( --tickSize );
    }


    /* Step labels */

    .stepLabelsContainer
    {
        position:           relative;
    }

    .stepLabel
    {
        @extend %Nessie-SemiBold;
        font-size:          var( --typo-3 );
        line-height:        var( --line-height-s );
        color:              var( --PC-GREY--D15 );

        position:           absolute;
    }
}




.orientation__horizontal
{
    .trackContainer
    {
        flex-direction: column;
    }

    .track,
    .stepLabelsContainer
    {
        width:          calc( 100% - var( --handleSize ) );

        margin-left:    calc( var( --handleSize ) / 2 );
        margin-right:   calc( var( --handleSize ) / 2 );
    }

    .track
    {
        height:         var( --trackSize );

        margin-top:     calc( ( var( --horizontalSliderHeight ) - var( --trackSize ) ) / 2 );
        margin-bottom:  calc( ( var( --horizontalSliderHeight ) - var( --trackSize ) ) / 2 );
    }

    .handle
    {
        top:            50%;
        transform:      translateX( -50% ) translateY( -50% );
    }

    .trackFill
    {
        height:         var( --trackSize );
    }

    .stepLabelsContainer
    {
        height:         var( --stepLabelContainerHeight );

        margin-left:    calc( var( --handleSize) / 2 );
        margin-right:   calc( var( --handleSize) / 2 );
    }

    .stepLabelsContainer
    {
        margin-bottom:      6px;

        &:last-child
        {
            margin-top:     8px;
            margin-bottom:  -5px;
        }
    }

    .stepLabel
    {
        transform:  translateX( -50% );

        &:first-child /* start label */
        {
            transform:  translateX( calc( -1 * ( var( --handleSize) / 2 ) ) );
        }

        &:last-child /* end label */
        {
            transform: translateX( calc( -100% + ( var( --handleSize) / 2 ) ) );
        }
    }
}




.orientation__vertical
{
    width:      auto;
    height:     var( --verticalSliderHeight );

    .trackContainer
    {
        height: 100%;
    }

    .track,
    .stepLabelsContainer
    {
        height:         calc( 100% - var( --handleSize ) );

        margin-top:     calc( var( --handleSize ) / 2 );
        margin-bottom:  calc( var( --handleSize ) / 2 );
    }

    .trackFill
    {
        width:          var( --trackSize );
    }

    .handle
    {
        left:           50%;
        transform:      translateX( -50% ) translateY( 50% );
    }

    .stepLabelsContainer
    {
        margin-right:       var( --labelMargin );

        &:last-child
        {
            margin-right:   0;
            margin-left:    var( --labelMargin );
        }
    }

    .stepLabel
    {
        transform:  translateY( 50% );
    }

    .tick
    {
        left:       50%;
        transform:  translateX( -50% ) translateY( 50% );
    }
}




.hasHandleLabels
{
    .handleLabel
    {
        display:            flex;
        position:           relative;
        justify-content:    center;

        color:              var( --PC-BLUE );

        cursor:             default;
        user-select:        none;
    }
}


.handleLabelPosition__top
{
    .handleLabel
    {
        /* This is a magic number, it’s just a coincidence that it happens to be
           the same number as the handle size. We should use the Text component
           to avoid this */
        top:    -16px;
    }
}

.handleLabelPosition__bottom
{
    .handleLabel
    {
        /* This is a magic number, it’s just a coincidence that it happens to be
           the same number as the handle size. We should use the Text component
           to avoid this */
        bottom: -16px;
    }
}

.handleLabelPosition__right
{
    .handleLabel
    {
        /* This is a magic number, it’s just a coincidence that it happens to be
           the same number as the handle size. We should use the Text component
           to avoid this */
        left:   16px;
    }
}

.handleLabelPosition__left
{
    .handleLabel
    {
        /* This is a magic number, it’s just a coincidence that it happens to be
           the same number as the handle size. We should use the Text component
           to avoid this */
        right:  16px;
    }
}




.error
{
    .trackFill
    {
        background: color( var( --PC-RED ) a( 35% ) );
    }

    .handleLabel
    {
        color:      var( --PC-RED );
    }
}


.disabled
{
    .track:hover .handle
    {
        border-color:   var( --PC-GREY--L85 );
    }

    .trackFill
    {
        background:         var( --PC-GREY--L70 );
    }

    .handle
    {
        background:         var( --PC-GREY--L95 );
        border-color:       var( --PC-GREY--L85 );
        cursor:             default;

        &:active
        {
            cursor:         default;
        }
    }

    .handleLabel
    {

    }

    .ticksContainer
    {
        display:            none;
    }

    .stepLabel
    {
        color:              var( --PC-GREY--L70 );
    }
}


.labelContainer
{
    margin-bottom:  8px;
}


.grabbing
{
    .handle,
    .trackFill
    {
        transition: none;
    }

    .handle
    {
        width:              var( --handleSize );
        height:             var( --handleSize );

        background-color:   var( --PC-BLUE );
        border-color:       var( --PC-BLUE );
    }
}
